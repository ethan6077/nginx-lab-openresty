daemon off;
master_process off;
worker_processes 1;
events {
    worker_connections 1024;
}
http {
    server {
        listen 80;
        location / {
            default_type text/html;
            content_by_lua_block {
                ngx.say("<p>hello world from openresty</p>")
            }
        }

        location /api {
            access_by_lua_block {
                local reauinf = ngx.var.cookie_REAUINF
                if reauinf == nil or reauinf == '' then
                    ngx.status = 401
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED);
                end
            }
            set $cid "";
            set $mapped_api_version "";
            rewrite_by_lua_block {
                function parse(reauinf)
                    local reauinf = ngx.decode_base64(reauinf)
                    local cjson = require "cjson"
                    return cjson.decode(reauinf).cid
                end
                function is_in_dev_white_list(consumer_id)
                    local dev_white_list = {"a3e47fd0b0f24002bd6ed314407c5634", "aaaa", "bbbb", "cccc"}
                    for _,value in ipairs(dev_white_list) 
                    do
                        if consumer_id == value then
                            return true
                        end
                    end
                    return false
                end
                function is_in_bucket(consumer_id)
                    local matcher = "1"
                    consumer_id_last_digit = string.sub(consumer_id, -1)
                    ngx.log(ngx.STDERR, ' | consumer_id_last_digit: ' .. consumer_id_last_digit)
                    if consumer_id_last_digit == matcher then
                        return true
                    else
                        return false
                    end
                end
                function should_map_to_v1(consumer_id)
                    return is_in_dev_white_list(consumer_id) or is_in_bucket(consumer_id)
                end
                if ngx.var.cookie_REAUINF then
                    local status, consumer_id = pcall(parse, ngx.var.cookie_REAUINF);
                    if not status then
                        ngx.status = 401
                        return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                    else
                        ngx.log(ngx.STDERR, ' | consumer_id: ' .. consumer_id)
                        ngx.var.cid = consumer_id
                        if should_map_to_v1(consumer_id) then
                            ngx.log(ngx.STDERR, ' | redirect traffic to v1')
                            ngx.var.mapped_api_version = "/v1"
                            ngx.log(ngx.STDERR, ' | mapped_api_version: ' .. ngx.var.mapped_api_version)
                        else
                            ngx.log(ngx.STDERR, ' | keep traffic with v0')
                        end
                    end
                end
            }
            default_type text/html;
            content_by_lua_block {
                ngx.say("<p>hello from api!</p>")
            }
        }

    }
}
