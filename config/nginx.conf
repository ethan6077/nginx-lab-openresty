daemon off;
master_process off;
worker_processes 1;
events {
    worker_connections 1024;
}
http {
    server {
        listen 80;
        location /hello {
            default_type text/html;
            content_by_lua_block {
                ngx.say("<p>hello world from openresty</p>")
            }
        }

        location / {
            access_by_lua_block {
                local reauinf = ngx.var.cookie_REAUINF
                if reauinf == nil or reauinf == '' then
                    ngx.status = 401
                    return ngx.exit(ngx.HTTP_UNAUTHORIZED);
                end
            }
            set $cid "";
            set $mapped_api_version "";
            rewrite_by_lua_block {
                -- define the config table here, key the METHOD-path, values are OFF, DEV, SAMPLE, HALF, ALL
                local migration_config = {
                    ["GET-collections"] = "SAMPLE",
                    ["POST-collections"] = "OFF",
                    ["GET-items"] = "OFF",
                    ["POST-items"] = "OFF",
                    ["PUT-bookmarks"] = "OFF"
                }
                local dev_white_list = {"a3e47fd0b0f24002bd6ed314407c5634", "aaaa", "bbbb", "cccc"}
                function parse(reauinf)
                    local reauinf = ngx.decode_base64(reauinf)
                    local cjson = require "cjson"
                    return cjson.decode(reauinf).cid
                end
                function get_config_key(uri, method)
                    -- remove query params
                    local path = string.gsub(ngx.var.request_uri, "?.*", "")
                    -- remove the first char "/", first char index is 1 not 0
                    local config_key = method .. '-' .. string.sub(path, 2)
                    ngx.log(ngx.STDERR, ' | config_key: ' .. config_key)
                    return config_key
                end
                function is_in_dev_white_list(consumer_id)
                    for _,value in ipairs(dev_white_list) 
                    do
                        if consumer_id == value then
                            return true
                        end
                    end
                    return false
                end
                function is_in_bucket(consumer_id, config_value)
                    if config_value == "SAMPLE" then
                        local matcher = "11"
                        consumer_id_last_two_chars = string.sub(consumer_id, -2)
                        ngx.log(ngx.STDERR, ' | consumer_id_last_two_chars: ' .. consumer_id_last_two_chars)
                        if consumer_id_last_two_chars == matcher then
                            return true
                        else
                            return false
                        end
                    end
                    if config_value == "HALF" then
                        local matcher = {"0", "1", "2", "3", "4", "5", "6", "7"}
                        consumer_id_last_char = string.sub(consumer_id, -1)
                        ngx.log(ngx.STDERR, ' | consumer_id_last_char: ' .. consumer_id_last_char)
                        if consumer_id_last_char == matcher then
                            return true
                        else
                            return false
                        end
                    end
                    return false
                end
                function should_map_to_v1(consumer_id)
                    local config_value = migration_config[get_config_key(ngx.var.request_uri, ngx.var.request_method)]
                    if config_value == nil or config_value == "OFF" then
                        return false
                    end
                    ngx.log(ngx.STDERR, ' | config_value: ' .. config_value)
                    if config_value == "ALL" then
                        return true
                    end
                    if config_value == "DEV" then
                        return is_in_dev_white_list(consumer_id)
                    end
                    -- SAMPLE and HALF
                    local has_passed_consumer_id_threshold = is_in_dev_white_list(consumer_id) or is_in_bucket(consumer_id, config_value)
                    return has_passed_consumer_id_threshold
                end
                if ngx.var.cookie_REAUINF then
                    local status, consumer_id = pcall(parse, ngx.var.cookie_REAUINF);
                    if not status then
                        ngx.status = 401
                        return ngx.exit(ngx.HTTP_UNAUTHORIZED)
                    else
                        ngx.log(ngx.STDERR, ' | consumer_id: ' .. consumer_id)
                        ngx.var.cid = consumer_id
                        if should_map_to_v1(consumer_id) then
                            ngx.log(ngx.STDERR, ' | redirect traffic to v1')
                            ngx.var.mapped_api_version = "/v1"
                            ngx.log(ngx.STDERR, ' | mapped_api_version: ' .. ngx.var.mapped_api_version)
                        else
                            ngx.log(ngx.STDERR, ' | keep traffic with v0')
                        end
                    end
                end
            }
            default_type text/html;
            content_by_lua_block {
                ngx.say("<p>hello from api!</p>")
            }
        }

    }
}
